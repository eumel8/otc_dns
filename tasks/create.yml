- name: Lookup zone_id
  include: lookup.yml

- name: Delete current zone
  include: delete.yml
  when: zone_id is defined

- name: Send request to API (list VPC for lookup)
  uri:
    url: "{{ AUTH_URL_VPC }}/v1/{{ PROJECT_ID }}/vpcs"
    method: GET
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: vpc_result
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: vpc_result.status == 200
  changed_when: false
  when:
    - vpc_name is defined

- name: Set fact vpc_id if vpc_name is defined
  set_fact:
    vpc_id: "{{ (vpc_result.content|from_json)|json_query(\"vpcs[?name=='\" + vpc_name + \"'].id|[0]\") }}"
  when:
    - vpc_name is defined

- name: Send request to API (list routers)
  uri:
    url: "{{ AUTH_URL_VPC }}/v2.0/routers/{{ vpc_id }}"
    method: GET
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: routerlist
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: routerlist.status == 200
  changed_when: false
  when:
    - vpc_id is defined

- name: Set Router facts
  set_fact:
    router_id: "{{ (routerlist.content|from_json)|json_query('router.id') }}"
    router_name: "{{ (routerlist.content|from_json)|json_query('router.name') }}"
    router_status: "{{ (routerlist.content|from_json)|json_query('router.status') }}"
    router_admin_state_up: "{{ (routerlist.content|from_json)|json_query('router.admin_state_up') }}"
    router_routes: "{{ (routerlist.content|from_json)|json_query('router.routes[]') }}"
    router_tenant_id: "{{ (routerlist.content|from_json)|json_query('router.tenant_id') }}"
    external_network_id: "{{ (routerlist.content|from_json)|json_query('router.external_gateway_info.network_id') }}"
    external_network_snat_state: "{{ (routerlist.content|from_json)|json_query('router.external_gateway_info.enable_snat') }}"
  when:
    - vpc_id is defined
    - routerlist is defined

- name: Send request to API (create zone)
  uri:
    url: "{{ AUTH_URL_DNS }}/v2/zones"
    method: POST
    body_format: raw
    follow_redirects: all
    return_content: yes
    validate_certs: yes
    status_code: 200,201,202,203
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
    body: "{{ lookup('template', 'create.json.j2')|to_json }}"
  register: zone
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: zone.status == 200 or zone.status == 201 or zone.status == 202 or zone.status == 203
  changed_when: false
  when: zone_name is defined

- name: Show zone
  debug:
    msg: "{{ zone }}"
  when: zone is defined

- name: Lookup zone_id
  include: lookup.yml

- name: Send request to API (wait for zone status ACTIVE)
  uri:
    url: "{{ AUTH_URL_DNS }}/v2/zones/{{ zone_id }}"
    method: GET
    return_content: yes
    validate_certs: yes
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: zone
  retries: 100
  delay: 5
  until: ((zone.content|from_json)|json_query('status')) == 'ACTIVE'
  changed_when: false
  when:
    - zone_id is defined
    - waitfor | bool

- name: Create zonerecords
  include: zonerecord_create.yml
